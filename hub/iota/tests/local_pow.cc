/*
 * Copyright (c) 2018 IOTA Stiftung
 * https://github.com/iotaledger/hub
 *
 * Refer to the LICENSE file for licensing information
 */

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include <stdexcept>
#include <string>
#include <vector>

#include "common/crypto/types.h"
#include "common/helpers/digest.h"
#include "hub/iota/local_pow.h"
#include "hub/tests/runner.h"

using ::testing::_;
using ::testing::Return;

const std::string TX_TRYTES =
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999999999999999999999999999999999999"
    "99999999999999999999999999999999999999999JURSJVFIECKJYEHPATCXADQGHABKOOEZC"
    "RUHLIDHPNPIGRCXBFBWVISWCF9ODWQKLXBKY9FACCKVXRAGZ99999999999999999999999999"
    "9ME9999999999999999999999999YWPWXZD99999999999999999999SKJZIWTBHRPIKASBIUX"
    "TYWKBAHYPSZZWYRHJOJIRZJYKPFSILSAFQDXEJQR9JBAEWFBWGCLZBZWZNTUECLNKJROMYTXIY"
    "HBOBAVRMCWAXMKMIADRBTQTTKLQLMMRK9YKNCFSQYWMYCVFVOLCJVCILKDNUQHAMYN999LNKJR"
    "OMYTXIYHBOBAVRMCWAXMKMIADRBTQTTKLQLMMRK9YKNCFSQYWMYCVFVOLCJVCILKDNUQHAMYN9"
    "99ME9999999999999999999999999999999999999999999999999999999999999999999999"
    "999999999";

static const std::string TRUNK_TRYTES =
    "DCBVAFEBDQ9HUOYYOZWFMWRQGNVIBKJZPNXJSCKHVSYUQM9DKESV9QAHBQNYILAIRRYTBVZZDL"
    "FPA9999";
static const std::string BRANCH_TRYTES =
    "ACDKYSZEARIK9ASTFPGTNVKCNAOZE9KZNAAMJBQIKXDHCTTR9PMRLHOZGBKPJYWIXTUHGXAQ9F"
    "QNZ9999";

class MockPowProvider : public hub::iota::LocalPOW {
 public:
  MockPowProvider(std::shared_ptr<cppclient::IotaAPI> api, size_t depth,
                  size_t mwm)
      : hub::iota::LocalPOW(api, depth, mwm){};
  MOCK_CONST_METHOD1(
      getAttachmentPoint,
      nonstd::optional<cppclient::GetTransactionsToApproveResponse>(
          const nonstd::optional<std::string>& reference));
};

class LocalPOWTests : public hub::Test {};

TEST_F(LocalPOWTests, CorrectDigest) {
  cppclient::GetTransactionsToApproveResponse resp;
  resp.branchTransaction = BRANCH_TRYTES;
  resp.trunkTransaction = TRUNK_TRYTES;

  MockPowProvider powProvider(nullptr, 3, 9);

  ON_CALL(powProvider, getAttachmentPoint(_)).WillByDefault(Return(resp));

  std::vector<std::string> transactionsTrytes;
  for (auto i = 0; i < 10; ++i) {
    transactionsTrytes.push_back(TX_TRYTES);
  }
  auto powedTxs = powProvider.performPOW(transactionsTrytes);

  EXPECT_EQ(powedTxs.size(), transactionsTrytes.size());
  EXPECT_TRUE(
      std::all_of(powedTxs.begin(), powedTxs.end(),
                  [](const auto& powedTx) { return powedTx.size() == 2673; }));

  EXPECT_EQ(powedTxs[0].substr(hub::iota::LocalPOW::BRANCH_OFFSET, 81),
            resp.branchTransaction);
  EXPECT_EQ(powedTxs[0].substr(hub::iota::LocalPOW::TRUNK_OFFSET, 81),
            resp.trunkTransaction);
}
