// Copyright 2018 IOTA Foundation

#include <gtest/gtest.h>

#include <stdexcept>
#include <string>

#include "hub/crypto/argon2_provider.h"
#include "hub/crypto/types.h"
#include "hub/db/db.h"
#include "hub/tests/runner.h"

using namespace hub;
using namespace hub::crypto;

namespace {

class Argon2ProviderTest : public hub::Test {};

TEST_F(Argon2ProviderTest, EnforceMinimumSeedLength) {
  EXPECT_THROW(Argon2Provider{std::string("abcdefg")}, std::runtime_error);
}

TEST_F(Argon2ProviderTest, ShouldReturnValidAddress) {
  Argon2Provider provider(std::string("abcdefgh"));
  UUID uuid;
  auto address = provider.getAddressForUUID(uuid);

  EXPECT_EQ(address.size(), 81);
}

TEST_F(Argon2ProviderTest, ConstantAddressForUUID) {
  Argon2Provider provider(std::string("abcdefgh"));
  UUID uuid;
  auto address1 = provider.getAddressForUUID(uuid);
  auto address2 = provider.getAddressForUUID(uuid);

  EXPECT_EQ(address1, address2);
}

TEST_F(Argon2ProviderTest, DifferentUUIDsHaveDifferentAddresses) {
  Argon2Provider provider(std::string("abcdefgh"));
  UUID uuid1;
  UUID uuid2;
  EXPECT_NE(uuid1, uuid2);

  auto address1 = provider.getAddressForUUID(uuid1);
  auto address2 = provider.getAddressForUUID(uuid2);

  EXPECT_NE(address1, address2);
}

TEST_F(Argon2ProviderTest, CorrectAddress) {
  Argon2Provider provider(std::string("abcdefghijklmnopqrstuvwxyz"));
  UUID uuid("43vgLK8NYigfKagfahbCSm+lMFcilNjZyV8Jj6blqX5u98Lx7vjH98AG1oh/ezOR");

  auto address = provider.getAddressForUUID(uuid);

  ASSERT_EQ(address.str(),
            "TLGUJV9NKSKKLQYBABOPVINMHRMPOOADQPWGFAFULPVXFQBFDJXQGJVLELQECCIQAX"
            "JCBXKVPDCWYWYQB");
}

TEST_F(Argon2ProviderTest, CorrectSignature) {
  auto& connection = db::DBManager::get().connection();
  Argon2Provider provider(std::string("abcdefghijklmnopqrstuvwxyz"));
  // seed =
  // TTUVCDOGKVNMAPWDOIZPTBXAJDONMORWUMYWVFNDNYTYQUNREPBHTRVHKAJWXXVTHSRIFSCRGTOGZXPPD
  UUID uuid("43vgLK8NYigfKagfahbCSm+lMFcilNjZyV8Jj6blqX5u98Lx7vjH98AG1oh/ezOR");
  hub::crypto::Hash bundleHash(
      "VLZTNAO9IHHDFDKDICSYXWIKZELHMPYKKGHCALIUTKEGNDLCSJGASEMVLGCGIVQSHPCLFRZJ"
      "ZKUOLAAAA");

  std::string expectedSignature =
      "NJCPMNLRFKPCIQSIXQCYOOGLTHSTNGUFPTQOOWLSOOEUGZXCHPNPNLSSCWEL9ZHCWSYLZQRU"
      "TDJFRQJKZZWBOSASC9CGKJNHXEFCYBIKYMHQQBWUDUBJNKUTDZZTWVHQKQXMEIMBXCWIGIUZ"
      "HXGOPOWLDMQAKRKYAWSDGFUNPYECUIEOZJJBIMQYAAXBZPALYEUIMHAWIQRYQKFAGWRQVTWD"
      "R9HQTTC9VSVOBUKPXUNT9BKFXTCQQZLNCXHAZEXZYWUNVQDEOKLVUOCKTDNZDNSLHILBLFBJ"
      "FOYMBFQEUTCDVQTT9NLJTEXRGENDOVNTECMAYCDWOGD9WW9XQTQJKOBUBEBZAFNHNJPYDHPL"
      "JFJTWMJFEEQOQDCULHF9CCTPZWZ9ETRIPJTDVPPWERWTWNQXRCSSNHRDPBEULQ9KMRRXGXY9"
      "STBOAEFKSYDZNJCFQAZVQYDBEZTTSBGPKHQNIKDKSYAPMQIKCUJVUWJQJUEXQTNRHLMWOCHQ"
      "GIDDWATBPEYDWGAKSVHRCCNQQPYTPSYDEWCKHLGYSFFYP9SVPKJLBUPRECYGGCWIESYDCLKS"
      "ODPHUZGNAREWAUYSDRXXSHDGGVOIRPVLJKFRVAHJJLL9UMSRJYBPCDPCLZCNJVIYIJESWLZW"
      "HXHTUGEYCYLLPIXGWJYZOQS9BMAZCBWFYPTXBDJGIXLQKN9RALZXGAIFLVTUBEBDSWODPRON"
      "BOEHIAVUBNV9FUKXYKVAIDUGMPPTMKALS9LCXOLMQHHAISFRUB9YNHGHELRJXJQVQJNXLU9J"
      "AWFPUTCKD9SDQDEX9WUECHEECNZOCWKA9WUWVCKGXLLNIUWLZLT9MK9XMSDHDLFPCPKNITAS"
      "SKSMHBX9YQZALMCJE9NHCACHAVBUZCRMDGIQHRZEKTAVQGJUQSUIDMTIZUEPXHRTGWOJXGIH"
      "B9LRRSQCUESHDSWUKDK9MKEVSEL9MJORY9BXTQKVSA9GVDILOINEUMTVUQENSFETFQI9RJKE"
      "WUQYT9BWQINVEPNYMMJPDVIRXQL9IRBS9KNUDTRCHHLACSTHNMJFKFPKADUINVULJVIHVTJF"
      "WJ9EKNKDPILPU9LV9YUTLJYMCBYRWFCIHSWDNEUUYCNAXNMDQVYAHAEEEVJHX99KQ9RHMRTQ"
      "EKOSLXKXLOEXVYFQABHVNSCORW9XVZLNUD9MCGEIGXZLKHAAWFTFH9NSWMOCQNXFFGTJOPHG"
      "MTQS9RBOWGZRQPDIUVSBSNWURRZUGOC9YUSOXVLBNBXFAAGWJMJLWGJSRYABDGRHNBM9GDED"
      "LMDRLUYXMKJ9CTHBVAJPKU9QFTMPLJVPS9YLBKKJLSGYHDOFT99PTNNAQINUCDUQZZUVGBTJ"
      "JBPAXVRRDFPXR9ZTUADZXFGHMOFACPHLYGUKYBGRTCOJGNUPTVEMQSNENWLKNKQWYQNYYTYS"
      "AZBOJCUFJUHVBUJHFWN9SGMJNKVOHDNSDQLYXYUXB9LBOGL9QXOIIPBJJHWXUGZTIUGJFBYT"
      "JUSQY9LWHBMORDACTKOQSDNKRAWDAZVFBRVO9OXTQ99NYBMNKBTVVASYWEAM9NEONYZ9DRNU"
      "DOJSZYFDPXDTVFCSMOOBRSRSMTOESJXZNVOCQBFUFRDUZPMVSCBNIYSEGDQHXDUCQHCT9RTY"
      "JUELKZPDSBKUXQTXLADEXIHNZAHODG99WCNSCPWSDFYGCECVHVMSLYUXWVZKFVYPNKQSGJHK"
      "CIDKNYJSGLDKSPFCFTJFAYNTAUIOYPCVKUWKDCLSCE9KUVPZAAQ9BDVKMABZHPKTLMYLZOAU"
      "DFISWPPUKZRZMGYKACUDTD9MCJUYKKQIBRQHVIDRONCUEXVXTKMWHKFNOCZVVJCDQBOAZWGA"
      "9CZM9WCSBZFHBPOQNBTMNSVMWIDWSBLRTUIUWUBULEQI9HJJAYUYPJJFWZEIXCHQGBPHHSEZ"
      "XWNK9NLZTWJEOTZBJVPAYKUKCFGKNQO9JCQFOEOPGOEHGWYENEBE9TRUL9UYAADTUWQHABQY"
      "SHMRDVR9CNOV9GBBLYL9XHZEMEIBILQ9WA9AYYLKXTXUOJPNLOYAKXDUXVJSJWKSEJUDEMWQ"
      "NINPLBOHUASIFTBUOBW9GMURA9GSIX9ZIDQTX9FGOUWU9L9LWUOBHSA9KGQSVQWQHRYJMUJT"
      "LOFIAAAGGXRSILILSSZHWJHA9FCZHSF9IWWMKGZGFR9NRBEHPZPOLAZCVHGNSOWEJPPQICQR"
      "GR9WMVDEUPXQJRHYFXTHLOYZS9ZDTUGY9JAXXIBVUJRNUDJDSXCOSA9T9EPTFCBVZCMNFWMN"
      "SYTZPFBPVPNOCXHCYQFDKCBJC9STPVRAFAZQICXTTKDW9KLIKUVKQWYJKVFWERMVLIPVBVMI"
      "CM9ZUMCDRQZGMGRGXZJPJWTNGLRICEYTSOTPIZZXUEAHNJCVWMWQOXILIOGVGRKXUGZGWYRJ"
      "RRQRPHCWKZKASBQVDZUH9JH99VTAXNYFCPYZAYYGYYOIRDTAPCAIDXGDLSLRO9WWAWMHKFCE"
      "DVPKANOKHMHXRCEGIPCJTQVAQNQYFKTDTJYNHFUQGXRLXBUDPJXKXTBTSCHVTMRVNHBLQU9D"
      "VCMFQGVFKSTPLGNUY9LAHLCXSOXUZZASPLYHB9UWSLUAVPZKLLNIWKOYYVQYP9DMPBCH9IMF"
      "STRHOJTHYUPRUUNRNMMOPM9FTBI9LHWBDIFWNDRTBSJWRHVUYQ9KMLMYWOARSXQDKASKHUFJ"
      "BTEXHNFZHKKJBCFUBZGNBHIBWIKSGXDVIHCSZCMDYQTGFMVOLHOUE9BXNBMPRC9PBKRSVVXN"
      "GRCSXJLDOVFOZYKXZXSFOZKRHAXEBQAZIJD9YWECQXV9ZNEOHKVNSKUFEDWDYIUQTUDHRMEL"
      "SDARBHLEQGAHMKJFWJ9GFMQPSTNAMHQUOZW9YDTVFOW9ADGASYWJVCJAKDPKJBSC9O9LTNLV"
      "VTIERDZNTSGZPAMPFXYSJRADHDYDTDTF9OAFB9UBCFJ9AYOKGVQNIMZEBHSWDVUZXKDGWNYX"
      "YKJCEBRFWIKYKUVBIOSNVXQHFPSSQWXAOBIYSHSNPLSLY9SVXPHYVAVESSFIOBPVNFWGMRHM"
      "CNZCKIKNVWAXENHR9GKIYCFAEHUETPKFSGMIWCXBUEGZFI9YJKNQISQRI9GBFWZXOQT9ILQW"
      "SEAKTQZRQM9IX9VGNYUVDNDJZLNRGEVTSASOWRLWMSHSXCDZDPSZOWWNH9M9JDJB9EGOBLX9"
      "VQJROKTFWSHBX9WJNDNQQGLQKMCNXNUBRSKVGPBIQYEYLLMTC9EALUYPITIGDVERLYSSZBGX"
      "DUDPGJWXZGEITTTEIABYKSTLNJHZHELNSRPEDLCD9SWRKKOVMUQ9YYS9ACEMPSLZCOFMWSUF"
      "PTFISIGZY9DHMDMGJXCXDYARGCN9IPHAPDRPTIOOFNCEGKVNUCLLBKCV9VV9VQUTIPMSDAYE"
      "FIMEENVHDGPXTKKQMNBYCORWJYDUOPSBXPFMOJQORQOFWNZBUVMBOJQNLYWLNNAXTJOQ9XSI"
      "DWFOKUUQZHKHKUQDIBPIPIB9JOMIAABJLOVCLAIYQIXDXUKXRYYBKBTGMEXRRGGYFFXEBERH"
      "YKZOGFMOMLIUJIUYBSB9LCKLJZXXWLMYUMARUM9YOYLACMNCQLUG9JFXTAEUAIZHT9JMWSYY"
      "OEQZVLKKDPYGDDWJHAUTQDLIVIOKKFUGBRWCBTJZLZHHWLCTJYPMACLAJOICGCMUNKGSLNTP"
      "KGOITTTHHHHXROBYFBGDJBOU9WPCFOQOYHTQRMTFADBALWGEDMVNMATERFL9PLZNOGUCMXQP"
      "JYBPKJKVKRIPWE9ROLILTDFNNBZZIOVIHMOZPCIQEEJYJSTDFVWVOQRDZFGZESTNLTUOZONB"
      "AKKTKCXMXPNWHXGNALJRSSTYKYTULXPWEXNKIQGEFZXSPSNPC9NSBRCNKFJSSI9ZTJEUWGRA"
      "FFNLFGPOZHHRIOILRY9EEJUE9KARXPLU9FUPDBFWCNGTQKIUUOXSIEPRPONLMJBRBVYDIJVR"
      "OLMNCDLAELQETMZQCWB9YMWOLYLASVIGZOQIL99OMHLCALCOOTHWEK9MXQSIUCEPRDDOI9YB"
      "UUGKEXAOSYEEBNQWMTTG9YX9UBXAUGDIJFFJQQDBVDNEIHXNBNWQXF9WAILTKYR9SEQBKNMM"
      "DADNNVAWNIFGKXWYJFSVOJXPUAACIXDDBGGYTASGHQUFITIQQPLKGBFYHYLEQZZNIHILCL9F"
      "CHYPRQKMYMQB9JKYXENQUADITVQAKLGXWRCSAMOEVY9B9FPLIZGTLCULSERQLBQXATTMHRBB"
      "POVDTQVLSKPTFCDDVOUXDIVDSBEEBUILMYHZIXGHQFNMWUPGGZVLIW";

  auto signature = provider.getSignatureForUUID(connection, uuid, bundleHash);

  EXPECT_EQ(signature, expectedSignature);
}

TEST_F(Argon2ProviderTest, ShouldOnlySignOnce) {
  Argon2Provider provider(std::string("abcdefgh"));
  UUID uuid;

  auto& connection = db::DBManager::get().connection();

  // First time should work.
  provider.getSignatureForUUID(
      connection, uuid,
      Hash("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
           "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"));

  // Second time should fail.
  ASSERT_THROW(provider.getSignatureForUUID(
                   connection, uuid,
                   Hash("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
                        "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")),
               std::exception);
}

};  // namespace
