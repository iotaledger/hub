// Copyright 2018 IOTA Foundation

#include <gtest/gtest.h>

#include <stdexcept>
#include <string>

#include "hub/crypto/local_provider.h"
#include "hub/crypto/types.h"
#include "hub/db/db.h"
#include "hub/tests/runner.h"

using namespace hub;
using namespace hub::crypto;

namespace {

class LocalProviderTest : public hub::Test {};

TEST_F(LocalProviderTest, EnforceMinimumSeedLength) {
  EXPECT_THROW(LocalProvider{std::string("abcdefg")}, std::runtime_error);
}

TEST_F(LocalProviderTest, ShouldReturnValidAddress) {
  LocalProvider provider(std::string("abcdefgh"));
  UUID uuid;
  auto address = provider.getAddressForUUID(uuid);

  EXPECT_EQ(address.size(), 81);
}

TEST_F(LocalProviderTest, ConstantAddressForUUID) {
  LocalProvider provider(std::string("abcdefgh"));
  UUID uuid;
  auto address1 = provider.getAddressForUUID(uuid);
  auto address2 = provider.getAddressForUUID(uuid);

  EXPECT_EQ(address1, address2);
}

TEST_F(LocalProviderTest, DifferentUUIDsHaveDifferentAddresses) {
  LocalProvider provider(std::string("abcdefgh"));
  UUID uuid1;
  UUID uuid2;
  EXPECT_NE(uuid1, uuid2);

  auto address1 = provider.getAddressForUUID(uuid1);
  auto address2 = provider.getAddressForUUID(uuid2);

  EXPECT_NE(address1, address2);
}

TEST_F(LocalProviderTest, CorrectAddress) {
  LocalProvider provider(std::string("abcdefghijklmnopqrstuvwxyz"));
  UUID uuid("43vgLK8NYigfKagfahbCSm+lMFcilNjZyV8Jj6blqX5u98Lx7vjH98AG1oh/ezOR");

  auto address = provider.getAddressForUUID(uuid);

  ASSERT_EQ(address.str(),
            "NEQQNKJNUTVDSB9EKZMS9LHI9RHQDRQ9ABOFEFTISBVUUQDEPJUIXXOZHENBOGZBKQ"
            "BGZHBOQC9BYWOFD");
}

TEST_F(LocalProviderTest, CorrectSignature) {
  auto& connection = db::DBManager::get().connection();
  LocalProvider provider(std::string("abcdefghijklmnopqrstuvwxyz"));
  // seed =
  // TTUVCDOGKVNMAPWDOIZPTBXAJDONMORWUMYWVFNDNYTYQUNREPBHTRVHKAJWXXVTHSRIFSCRGTOGZXPPD
  UUID uuid("43vgLK8NYigfKagfahbCSm+lMFcilNjZyV8Jj6blqX5u98Lx7vjH98AG1oh/ezOR");
  hub::crypto::Hash bundleHash(
      "VLZTNAO9IHHDFDKDICSYXWIKZELHMPYKKGHCALIUTKEGNDLCSJGASEMVLGCGIVQSHPCLFRZJ"
      "ZKUOLAAAA");

  std::string expectedSignature =
      "UOWNXGNPDRZYWYNIHRMGGUX9UKPXDLPHGVSKZEJAIUTODAXQYTR9IETZSMDWAUYU9VWJMBFR"
      "FSC9FZPHYIFRTDMBBSIYKRZWGIOA9TVEGYKLLHUQBVNGUQSXVALGUDUNMRBN9LIMCCPLIRAK"
      "MHTLAZPCWVDPJDALY9FOAJFUHYAAMRZAHILFOURQYITNVNVBSXWGLGJA9CJHAQWFREZWSWWV"
      "QXBIBTTOJBQJAF9LZRWJHTYWURBJVNYMUZZBHHCQCAPCUHQQJWVVYUKYGVLCTEOILIXKOVCY"
      "MZOXGDVDRTIILLTMZGZOZZHXORFGPXAPMAY9PDANTOWWOX9IKW9ZLXPNF9KLNVAMCKOBIO9G"
      "UUIAHQFHJVAYFRUYN9QXUJFT9WDGJRGAVHNQAUUJQWSJCBRPSN9TGLXVXQZ9FUGLQRC9LNGT"
      "WJCNTRRBXQKUEEIVODDEGWOSVDLXGGLTOHOIWXYNEXGIJPNWNVOIJARKHUAQZKIQA99TLDMP"
      "LNTXBVXA9JBCOKXFIIQLMVHX9HIBYGQRDGSFOYPCPXK9PIROUFUEUEFRMWJBAQDOMPQYUGQ9"
      "SMHPSOZCPWGSQX9DEZSWOMYANVKBPHPXZKLVTJUHQDIDGEEWWQISMKFTAZIWAEFKLPSSGNPX"
      "MLXLNFMHSZHKKYXHUMPYFKVDRN9TEJRGKNTVMUNFHX9DZHFQPIXBNAXYKVJPFXIUSTCDYBJE"
      "VUZPGPZMWNKZXZLMDXNJETNQNRWWIETCZMCSAUNX9XAXHZZUZHRB99BBFTLOCPWMSCGMVJXX"
      "WTWGZDMSYBTBZQHFYYKMXIPZGB9MCQKARMBFBSAZMNTPJMKHQS9QQMWNGYYNMECMVAD9JPUA"
      "OXEQWCYDLKSRNWN9TQMNMIZTXZ9WTMMDIBAPVEHHOZYSEKRLSCNRVJP9UVTCUUIZPWAFDLOF"
      "ZWIYUDVJAPAZQPFHJRYSNPMUIDUFXSHYGEZZFGELNGADXYHSUTUUGRFCSO9XJHLONYMKO9ME"
      "PZBO9FQYREREGFNZLCJZZNARBUVBRUPUTRMF9DSIGCFJBKZJDNZMEDDJWWPYZDVVHQWUS9VZ"
      "POSZR9RFCQ9BAQSNJMSNUCVENINRHMQTSWMBRHZGQGV9WZTYVCALU9PGOVELWWFFRJVKPGOO"
      "VKIHRUFGIAOZPRDE9MIBVBWOTDUEJZBYJNCMRZOR9ZFYMRGKXPUG9NOARLOWNL9FJSUJUNRU"
      "OWBQAM9ALEAQJOPOVBWCCZBUXLDWHZNSBHKCPJKQTGADKIWYFUO9IIWQWEELJVFAZKEXYUGA"
      "SPLK9HBNFPYSEMLUTUX9FBCZFJLSIDVCXGU99CRWZFVBGPWMSAAEX9UYNALDELNOZQJYABMI"
      "VI9ABPBWBQZTMURCGBAR9ZGIZYPHQVKDCWHBVPDKBD9HDJISGGPZZGGXG9IYYNMRZNGOSQCH"
      "VOPSBIZRNQZALDWZEDXIZXUACQXFDYJPEPNEV9OQGXABBLAWKLHJEQLVSGMZPKLJRIPKACQ9"
      "AJIHBGQXBBIIEQRKHDYUY9QPVUWBXKR9FBVLQWQVXYWTCJDF9QJNOXVGNUDQCNMIYUPVQDPR"
      "OGCFVYPSGBZOVJANYKXHILGFF9WCIQTVSSKW9JAJG9PFPFECIQQJUBJVADCZKYMXAZKZGIDA"
      "DGEVWJAOGFAPIJLXYNCMFQQVLADZHJZRSSJOJRDSJFMACHIPNWUZKCHNEZIMJRRLLUJLJRSW"
      "VKUSFDOBKEQLO9SCFDVXYV9XDUBMNNIWLOYQFDPFCP9QTMDHZMTESYBGPPZPOURAZPFWQKEN"
      "OCJOJEVGYYRS9SNJMBFMCFFQQONVIGZVKNWURQQEJFNIILBJWDSWNYINLLEEOSDCOBB9NVHN"
      "KUJFDCDYTEOJUOOTCNYRPAQPMAWCZOPMQKMGQLUGAHHIQSOJYHREYDYAOVRMYZ9GQBEKFYUX"
      "EYNTYAEIBSXCASNJMRCBLYLWDVWTIRZAELSIRVOTQKB9ONJZFNFCROS9AFJHZBTZNDC9ZATS"
      "QRV9MVHDBPKLMCBGEORBCUGQZNIQOSYVREKPHDEMVGYEHXUJSLABPXZTZDFCPOFAGGPBDESG"
      "HLCGIQHGQLUANVOX9ZQCQNXXJUGYBNAJF9OWCGTIOIUEARNDWWWLXFDVHGVKHOMDSMWYMRAA"
      "FZDCYDEU9SWLHHUGZBYBJPO9IRWILCPHTFZDVMF9A9PMPMLZXSDOWQHBOZLDJPIKFVBXYV9C"
      "9RRIFANFAHIHAMLFQKDOGVBCXW9CULZMAAEARSUZPTDWJRWPENFFXYZOBT99ZJ9JVJCSUOZV"
      "AOFJ9TWBYFJRDLQCG9KTTXFZ9ORDCYSEVWNHOYXRS9DD9HQVDXEM9ADRAEMDYRBDFJBNG9VO"
      "KVRVBBUFYEJIAHGX9WPZRRSDTPRUPV9ITZWGRGOCNEABEIDCWEMPFXUSHAMIFMEUYCGTWECN"
      "WBVYIEKOSYPLDQHSGMFEMQALPSYMKNTEPPPCKHOSPIQYOMUFXZSIZYOLKRJERBCIDEPDZUHS"
      "V9VTEFSIAYJMOSELQMXFRSJQFLHOJFYFMJTZVWYCJQYXSRVVUQY9FLXRLTSPMFS9APNDYUFY"
      "BUMRADXCJBIZJNACHNTGQXVNPJNIHVRAAP9WHXSKOKEOJZDXQG99JVMDG9FNGNBOTLCWPNYK"
      "YXDZCGFSANNHLXMQNRDSHALNPPCUTXLOEKOBKCM9ADAJW9WAISACHRTITCSMUAJMHSKYPQFO"
      "UNKWACJKKXCMOCCCJYUQBZVDGNEZHAQQUWSBATQYDXWYQNRCQHA9IOEVNBDDVPSIPBUHRXKJ"
      "APTG9BTXRIXAHXT9TLMIPOZLYJXGNSDSERTADTJGPERHTXQQYJUJWHLQREQHQP9VDEEJQRJC"
      "UJHDKBUBPOUYJCVWUTDRP9AEWMLST9LNRPHWOPNUVQWNRSDLKLHKVZEYMILPKDBZVMJCFQND"
      "BGCZO9DQXKTOKUUKNBKTNIZDAEGCCEMSGZZGMRAFGWNQDQFODCCBLVTFZPGADVMVUTDDNRZ9"
      "XRYTBIFLHSI9CNAJTGVZDALAVIRDLXCYEFSZXJAEMHKRH999SCX9YXOCEDQMEPFBMM9QPMGD"
      "QGOKAPP9LIRAMIJW9OBDXBISRKQVRK9RDAPEGPDAOKZNTXMJFLPWC9DJKLOTTBCIBOWSYLOA"
      "KOTRPHWTISILSXIIDWAPHN9XNASFYSDTRRJOSK9QYSZGHMHHFFTHCGSDHBPYKLQMQROMDQVD"
      "FUFGDBHFKNGERSJAGPFOJUMAOEQQSXWXZUJXIGTUGBIYHKDZBUBFTCUSJXDUSXLAJSLZNDGS"
      "RQRDRYGFCOWOZRIUEM9FMKSYCUZJLEKCCCMBSZGRTLHU9LNLJSVIB9KIWUEMGRR9GWARQXLC"
      "SKPYYKMUKZGQKOZYDDDXEWYOFQQRYZOCHJCHGKHV99IUFJRMZDSTQHAIBALJECNTLROAVGOI"
      "RPEZCGLGSLSOEFZZKSSLZFBEONBHIOCCPMDZOTYOE9BQYCGFWGQQLWPYAWYWJCP9CTABGASF"
      "CKFMVYOYEONRODEIGAHMFUVZINLVCRFWMWADYUBKSFGZZWCZCR9ZMAXTURLEJZM9O99OFABD"
      "WOSBXSKURSBETYHSWLIJGUJDSKK9QVUVFPMHDMAEENBTWONSKFJVTLEZSBUPVTVUIESHXEIR"
      "UYHIODPQHVFEPAZTENOPNVYWTJBEDGTFDFTPPSOSZ9Z9C9AFOWJAFAQ9KTYXQW9D9SHBGJWC"
      "ZKNMRAFBYRCGCBEIIUKO9ANSJFXMRZAQWUDSNCQFINSXGMWCRSEUKTRGEGHUHCCJCYMXIOOH"
      "TSFUSGRBCMYRJYYBTXWWXDUKRSQA9ACDIGJQUNIDTAOPHDOAQL9UTPDIKAHTDQCCKHJNUBMD"
      "JNICELAWFUWWFLXFBNM9SGFPJQKJDONTMEUJNXNCSSMAJIJGRKTJYYZUKKRFBIBGOBPJFDWZ"
      "LPDUQIGYYPFDCEENWMIMTTFENWCHBECSDQWZAP9XONBHRYSRRTOTU9YVRGJCBQFLAELQBVLG"
      "VVBABLRGAPRSMDCYJCLLEFRHDCONMHFDZ9BD9FQSIDIDZELLTKSQFOXWLUDIPOIVRUPWTDOK"
      "CRTNSLCUSS9WPECHLLUFXOKRWAC9UWHKNWBJRIFVJRJAKKFPVGPFTWTHVEXJQTDLNUDCXHC9"
      "CNBPATCQELYMGDHDUSQUPOIKTXSTQOAGXWS9RHS9ZLICERUYGWSKBJTNIN9QTBEXXZFLPCRX"
      "OKCYTBDKYOHIE9SXAVLRIHJUTUNERZTSPDJPRMNTCOHQZQFPTGRJXXYYQGBOFOFUVQAV9FXY"
      "NRERUSOFJGMCJUTAJK9RFWRYWINQBLEEWOJRTGXDNQSCAEHGAR9SKW";

  auto signature = provider.getSignatureForUUID(connection, uuid, bundleHash);

  EXPECT_EQ(signature, expectedSignature);
}

TEST_F(LocalProviderTest, ShouldOnlySignOnce) {
  LocalProvider provider(std::string("abcdefgh"));
  UUID uuid;

  auto& connection = db::DBManager::get().connection();

  // First time should work.
  provider.getSignatureForUUID(
      connection, uuid,
      Hash("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
           "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"));

  // Second time should fail.
  ASSERT_THROW(provider.getSignatureForUUID(
                   connection, uuid,
                   Hash("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
                        "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")),
               std::exception);
}

};  // namespace
