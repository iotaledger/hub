/*
 * Hub related messages.
 */

syntax = "proto3";

option java_package = "org.iota.rpchub";

package hub.rpc;

/*
  Error codes that can be returned by the hub.
 */
enum ErrorCode {
  // Generic error drop-in.
  EC_UNKNOWN = 0;
  // UserId already exists.
  USER_EXISTS = 1;
  // UserId does not exist.
  USER_DOES_NOT_EXIST = 2;
  // The user has insufficient balance for this operation.
  INSUFFICIENT_BALANCE = 3;
  // The batch is invalid (does not sum to 0 or user ids not unique)
  BATCH_INVALID = 4;
  // The batch is inconsistent (attempt to remove funds from a user's account without sufficient balance)
  BATCH_INCONSISTENT = 5;
  // The amount associated with the transfer is invalid (should be greater or less than 0)
  BATCH_AMOUNT_ZERO = 6;
  // The address is not known to the hub
  UNKNOWN_ADDRESS = 7;
  // Either the withdrawal has been swept or cancelled already
  WITHDRAWAL_CAN_NOT_BE_CANCELLED = 8;
  // Address was not eligible for the requested operation.
  INELIGIBLE_ADDRESS = 9;
  // Provided authentication token was invalid.
  INVALID_AUTHENTICATION = 10;
  //Provided address contained invalid checksum
  CHECKSUM_INVALID = 11;
  //Call to rpc signing_server failed (GetSignatureForUUID)
  SIGNING_FAILED = 12;
  //Call to rpc signing_server failed (GetAddressForUUID)
  GET_ADDRESS_FAILED = 13;
  //Call to rpc signing_server failed (GetSecurityLevel)
  GET_SECURITY_LEVEL_FAILED = 14;
  //Call node's api failed
  IRI_CLIENT_UNAVAILABLE = 15;
  //Provided address was already spent
  ADDRESS_WAS_ALREADY_SPENT = 16;
}

/*
 * The generic Error that will be used to return an error code on, e.g. Status::CANCELLED. 	
 *
 * The error will be serialised and stored in the Status' detail field.
 */
message Error {
  ErrorCode code = 1;
}


/*
 * Request for creating a new user.  
 */
message CreateUserRequest {
  string userId = 1;
}


/*
 * Reply for creating a new user.
 *
 * Currently unused.
 */
message CreateUserReply {}


/*
 * Request for requesting a user's currently available balance.
 */
message GetBalanceRequest {
  string userId = 1;
}


/*
 * Reply containing a user's currently available balanc.e
 */
message GetBalanceReply {
  // User balance that is currently available for withdrawal / trades
  int64 available = 1;

  // TODO(th0br0): pendingSweep
}


/*
 * Request for creating a new deposit address for a user.
 */
message GetDepositAddressRequest {
  string userId = 1;
  bool includeChecksum = 2;
}


/*
 * Reply containing the new deposit address.
 */
message GetDepositAddressReply {
  // Newly created deposit address
  string address = 1;
}


/*
 * Requests a user-submitted withdrawal.
 *
 * This will fail if the user does not have sufficient balance available.
 */
message UserWithdrawRequest {
  string userId = 1;
  // Address the user requests payout to. Should be without checksum.
  string payoutAddress = 2;
  // Requested withdrawal amount
  uint64 amount = 3;
  // Tag for withdrawal
  string tag = 4;
  // should command validate address
  bool validateChecksum = 5;
}

message UserWithdrawReply {
  // This withdrawal's UUID
  string uuid = 1;
}


/*
 * Request to cancel an already submitted withdrawal.
 */
message UserWithdrawCancelRequest {
  // Withdrawal UUID that is to be canceled
  string uuid = 1;
}


/*
 * Reply for withdrawal cancellation.
 */
message UserWithdrawCancelReply {
  // True if withdrawal could be canceled
  bool success = 1;
}

message GetStatsRequest {}

message GetStatsReply {
  // Total user account balance currently managed by the hub.
  uint64 totalBalance = 1;
}

message GetUserHistoryRequest {
  // UserId
  string userId = 1;
  // Records newer than this time (MS since epoch) will be retrievd
  uint64 newerThan = 2;
}

enum UserAccountBalanceEventType {
  // Unused
  UAB_UNKNOWN = 0;
  // Deposit into user account (positive amount)
  DEPOSIT = 1;
  // User received tokens as part of a transfer batch (positive amount)
  BUY = 2;
  // User withdrawal request (negative amount)
  WITHDRAWAL = 3;
  // Cancelled user withdrawal request (positive amount)
  WITHDRAWAL_CANCELED = 4;
  // User lost tokens as part of a transfer batch (negative amount)
  SELL = 5;
}
enum UserAddressBalanceReason {
  UADD_UNKNOWN = 0;
  // New user deposit tracked
  UA_DEPOSIT = 1;
  // Hub-sweep.
  UA_SWEEP = 2;
}
enum HubAddressBalanceReason {
  HUB_UNKNOWN = 0;
  // Sweep inbound (used as reminader address)
  INBOUND = 1;
  // Sweep outbound (used as input)
  OUTBOUND = 2;
}
message UserAccountBalanceEvent {
  string userId = 1;
  // Time since epoch in MS when the balance change occured
                       uint64 timestamp = 2;
  UserAccountBalanceEventType type      = 3;
                        int64 amount    = 4;
  // Will contain sweep bundle hash on deposit
  // Will contain withdrawal uuid on withdrawal or withdrawal cancel
  string sweepBundleHash = 5;
  string withdrawalUUID  = 6;
}

message UserAddressBalanceEvent {
                    string userId      = 1;
                    string userAddress = 2;
                     int64 amount      = 3;
  UserAddressBalanceReason reason      = 4;
  // Depositing bundle's tail (if reason == DEPOSIT)
  // Bundle hash of sweep (if reason == SWEEP)
  string hash      = 5;
  uint64 timestamp = 6;
  string message = 7;
}

message HubAddressBalanceEvent {
                   string hubAddress      = 1;
                    int64 amount          = 2;
  HubAddressBalanceReason reason          = 3;
                   string sweepBundleHash = 4;
                   uint64 timestamp       = 5;
}

message BalanceEvent {
  oneof theEvent {
    UserAccountBalanceEvent userAccountEvent = 1;
    UserAddressBalanceEvent userAddressEvent = 2;
     HubAddressBalanceEvent hubAddressEvent  = 3;
  }
}

message BalanceSubscriptionRequest {
  // Balances newer than this time (MS since epoch) will be retrievd
  uint64 newerThan = 1;
}

message GetUserHistoryReply {
  // List of all user balance events for given user
  repeated UserAccountBalanceEvent events = 1;
}


/*
  This request contains a netted transfer batch. 
  UserIds must be unique.
 */
message ProcessTransferBatchRequest {
  message Transfer {
    string userId = 1;
     int64 amount = 2;
  }

  repeated Transfer transfers = 1;
}

message ProcessTransferBatchReply {}

message SweepEvent {
           string bundleHash     = 1;
           uint64 timestamp      = 2;
  repeated string withdrawalUUID = 3;
}

message SweepSubscriptionRequest {
  // Sweeps newer than this time (MS since epoch) will be retrievd
  uint64 newerThan = 1;
}

message GetAddressInfoRequest {
  // The address to look up
  string address = 1;
}

message GetAddressInfoReply {
  // The user identifier who owns an address
  string userId = 1;
}

message SweepInfoRequest {
  oneof requestBy {
    // WIthdrawal UUID to look up
    string withdrawalUUID = 1;
    // Sweep's bundle hash
    string bundleHash = 2;
  }
}

message SignBundleRequest {
  // The Hub-owned IOTA address that should be signed. (without checksum)
  string address = 1;
  // The bundle hash that should be signed.
  string bundleHash = 2;
  // Authentication token 
  string authentication = 3;
  // should command validate address
  bool validateChecksum = 4;
}

message SignBundleReply {
  // The resulting signature
  string signature = 1;
}

message SweepDetailRequest {
   // Sweep's bundle hash
   string bundleHash = 1;
}

message SweepDetailReply {
  //Sweep's  confirmation status
  bool confirmed = 1;
  //Sweep's transactions trytes
  repeated string trytes = 2;
  //Sweep's tails hashes (multiple reattachment for each bundle)
  repeated string tailHash = 3;
}
